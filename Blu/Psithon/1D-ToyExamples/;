import torch
import numpy as np
import matplotlib.pyplot as plt


class QuantumSimulator:
    def __init__(self, nx=10000, dx=0.1, dt=0.01, hbar=1.0):
        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        self.nx = nx
        self.dx = dx
        self.dt = dt
        self.hbar = hbar
        self.x = torch.linspace(-nx * dx / 2, nx * dx / 2, nx, dtype=torch.complex64).to(self.device)
        self.k = 2 * np.pi * torch.fft.fftfreq(nx, dx).to(self.device)

        plt.ion()
        self.fig, (self.ax1, self.ax2) = plt.subplots(2, 1, figsize=(10, 8))

    def gaussian_packet(self, x0, p0, sigma):
        norm = (2 * np.pi * sigma**2)**(-0.25)
        psi = norm * torch.exp(-(self.x - x0)**2 / (4 * sigma**2))
        psi *= torch.exp(1j * p0 * self.x / self.hbar)
        return psi

    def kinetic_evolution(self, psi):
        psi_k = torch.fft.fft(psi)
        k2 = self.k**2
        psi_k *= torch.exp(-1j * self.hbar * k2 * self.dt / (2))
        return torch.fft.ifft(psi_k)

    def potential_evolution(self, psi):
        V = torch.zeros_like(self.x)
        # Create infinite barriers
        well_width = 600  # Adjust width as needed
        V[torch.abs(self.x) > well_width / 2] = 1e6  # Large value for "infinite" barrier
        return psi * torch.exp(-1j * V * self.dt / self.hbar)

    def step(self, psi):
        psi = self.kinetic_evolution(psi)
        psi = self.potential_evolution(psi)
        psi = self.kinetic_evolution(psi)
        return psi

    def plot_state(self, psi, step):
        psi_cpu = psi.cpu()
        self.ax1.clear()
        self.ax2.clear()

        self.ax1.plot(self.x.cpu().real.numpy(), psi_cpu.real.numpy(), 'b', label='Real')
        self.ax1.plot(self.x.cpu().real.numpy(), psi_cpu.imag.numpy(), 'r', label='Imaginary')
        self.ax1.legend()
        self.ax1.set_title(f'Wave Function (Step {step})')

        prob = torch.abs(psi_cpu)**2
        self.ax2.plot(self.x.cpu().real.numpy(), prob.numpy(), 'k')
        self.ax2.set_title('Probability Density')
        plt.pause(0.01)

    def evolve(self, psi, steps, plot_interval=500):
        psi = psi.to(self.device)
        psi_history = torch.zeros((steps + 1, len(psi)), dtype=torch.complex64)
        psi_history[0] = psi.cpu()

        for i in range(steps):
            psi = self.step(psi)
            psi_history[i + 1] = psi.cpu()
            if i % plot_interval == 0:
                self.plot_state(psi, i)

        return psi_history


sim = QuantumSimulator()
psi0 = sim.gaussian_packet(x0=-20, p0=0.2, sigma=20.0)
evolution = sim.evolve(psi0, steps=100000)
